export class Personne{
    constructor(public prenom:string,
                public nom:string,
                public genre:Genre,
                protected religion?:Religion){};

    boire(b:Boisson):void {
        console.log(b.nom, " alcool ",b.asAlcool, " bio ", b.isBio);
    };

    toString():void {
        console.log(this.prenom, this.nom);
    };

}

export enum Genre{
    Homme = "Homme",
    Femme = "Femme"
}

export enum Religion{
    Buddhism = "Buddhism",
    Judaism = "Judaism",
    Islam = "Islam",
    Catholicism = "Catholicism",
    Atheist = "Atheist"
}

export class Boisson{
    constructor(public nom:string,
                public asAlcool:boolean,
                public isBio:boolean){};

}

export class Formateur extends Personne{
    constructor(private connaissances:Connaissance[],
                public prenom:string,
                public nom:string,
                public genre:Genre,
                public religion:Religion
                ){super(prenom, nom, genre, religion)};

    enseigne():Connaissance[]{
        let connaissances:Connaissance[] = [];
        this.connaissances.map((c:Connaissance)=>{if(c.experience>2)connaissances.push(c)});
        return connaissances;
    }
}

export class Connaissance {
    constructor(public nom:string,
                public experience:number){};
}

export class Stagiaire extends Personne{
    constructor(public prenom:string,
                public nom:string,
                public genre:Genre,
                public religion:Religion,
                public certifications:Certification[]
                ){super(prenom, nom, genre, religion)};
}

export class Certification{
    constructor(public nom:string,
               public annee:number){}
}

export class Formation{
    constructor(public nom:string,
                public dateDebut:string,
                public dateFin:string,
                public stagiaires:Stagiaire[],
                public formateurs:Formateur[]){}
}




import {Boisson, Certification, Connaissance, Formateur, Genre, Religion, Stagiaire, Formation} from "./model/model";

export function nouvelleFormation (){
    let stagiaire1 = new Stagiaire("Jean","Claude", Genre.Homme,Religion.Buddhism, [new Certification("java8", 7), new Certification("bloc-note", 36)]);
    let stagiaire2 = new Stagiaire("Jean","Jaqueline", Genre.Femme,Religion.Judaism, [new Certification("java8", 7)]);

    stagiaire1.boire(new Boisson("Whyskry", true, true));
    stagiaire2.toString();

    let formateur = new Formateur([new Connaissance("Java8", 15), new Connaissance("bloc-note", 58)], "Jean", "Régis", Genre.Homme, Religion.Atheist);

    console.log(formateur.enseigne());

    let formation = new Formation("Java","28/08", "29/08", [stagiaire2, stagiaire1], [formateur]);

    console.log(formation);
}

nouvelleFormation();
/****************/



import 'mocha';
import { expect } from 'chai';
import { Genre, Religion, Boisson } from '../Person';
import { Certification, Stagiaire } from '../Stagiaire';

describe('Stagiaire', () => {

    let kraken = new Boisson("The Kraken", true, true);
    let certifs = [new Certification("OCLA", new Date('2019-04-10')), new Certification("OCLA 2", new Date('2020-06-25'))]
    let person = new Stagiaire("nom", "prenom", Genre.Femme, certifs, Religion.Buddhism, kraken);

    it('toString', () => {
        expect(person.toString()).to.equal('prenom nom');
    });
    it('boire', () => {
        expect(person.boire()).to.equal('The Kraken => alcool: true, bio: true');
    });
    it('certification', () => {
        expect(person.certification[0].nom).to.equal('OCLA');
        expect(person.certification[1].nom).to.equal('OCLA 2');
    });
});